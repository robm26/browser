# https://github.com/awslabs/serverless-application-model/releases/tag/1.4.0

AWSTemplateFormatVersion: '2010-09-09'
Description: Alexa Travel Browser Skill and Console
Transform: AWS::Serverless-2016-10-31
Parameters:

  ProjectName:
    Type: String
    Default: travel-browser
    Description: 'Enter the name for your project.  This will be used to name new stack objects.'

Metadata:
  Name: !Ref ProjectName
Resources:

  DynamoTable:
     Type: AWS::Serverless::SimpleTable
     Properties:
       TableName: !Sub 'ask-${ProjectName}'
       PrimaryKey:
         Name: id
         Type: String
       ProvisionedThroughput:
         ReadCapacityUnits: 5
         WriteCapacityUnits: 5

  SkillLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-skill'
      CodeUri: ../lambda/index.zip
      Description: Alexa Lambda function
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Timeout: 7
#      Policies: AmazonDynamoDBFullAccess
      Events:
        AlexaTrigger:
          Type: AlexaSkill
      Environment:
        Variables:
          DYNAMODB_TABLE: !Sub 'ask-${ProjectName}'
          IdentityPoolId: !Ref CognitoPool
          bucketUrlPath:  !GetAtt S3Bucket.WebsiteURL
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "dynamodb:Scan"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Resource:
                - !Sub 'arn:aws:dynamodb:*:*:table/ask-${ProjectName}'

        -
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - 'iot:Connect'
                - 'iot:DescribeEndpoint'
              Resource:
              - '*'

        -
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - 'iot:UpdateThingShadow'
              Resource:
                - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/ask*'

  userSessionAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-usersessionAPI'
      CodeUri: ../web/user/usersessionAPI/index.zip
      Description: DynamoDB Lambda function for API
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Timeout: 7
#      Policies: AmazonDynamoDBFullAccess
      Events:
#        AlexaTrigger:
#          Type: AlexaSkill
        usersessionAPI:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

      Environment:
        Variables:
          DYNAMODB_TABLE: !Sub 'ask-${ProjectName}'
      Policies:
        -
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Scan"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
              Resource:
                - !Sub 'arn:aws:dynamodb:*:*:table/ask-${ProjectName}'

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
#      BucketName: !Sub '${ProjectName}'
      AccessControl: PublicRead

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:

              - Effect: "Allow"
                Action:
                  - "iot:Connect"
                  - "iot:DescribeEndpoint"
                Resource: "*"

              - Effect: "Allow"
                Action:
                  - "iot:Subscribe"
                Resource:
                  - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/ask*'
#                 "arn:aws:iot:::ask*"

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated

  CognitoPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: 'AlexaIotPool'
      AllowUnauthenticatedIdentities: True

  CognitoRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
#  !Sub '${withTableName}MyFunction'
Outputs:
  SkillLambdaFunction:
    Value: !GetAtt SkillLambdaFunction.Arn

  CognitoPoolId:
    Value: !Ref CognitoPool
    Export:
      Name: "IdentityPool::Id"

  DatabaseTable:
    Value: !Sub 'ask-${ProjectName}'

  usersessionAPI:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  Bucket:
    Value: !Ref S3Bucket

  UserSite:
    Value: !GetAtt S3Bucket.WebsiteURL


