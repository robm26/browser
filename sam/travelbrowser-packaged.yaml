AWSTemplateFormatVersion: '2010-09-09'
Description: Alexa Travel Browser Skill and Console
Globals:
  Api:
    Cors:
      AllowHeaders: '''*'''
      AllowMethods: '''*'''
      AllowOrigin: '''*'''
  Function:
    Runtime: nodejs8.10
Metadata:
  Name:
    Ref: ProjectName
Outputs:
  Bucket:
    Value:
      Ref: S3Bucket
  CognitoPoolId:
    Export:
      Name: IdentityPool::Id
    Value:
      Ref: CognitoPool
  DatabaseTable:
    Value:
      Fn::Sub: ask-${ProjectName}
  SkillLambdaFunction:
    Value:
      Fn::GetAtt:
      - SkillLambdaFunction
      - Arn
  UserSite:
    Value:
      Fn::GetAtt:
      - S3Bucket
      - WebsiteURL
  usersessionAPI:
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
Parameters:
  ProjectName:
    Default: travel-browser
    Description: Enter the name for your project.  This will be used to name new stack
      objects.
    Type: String
Resources:
  CognitoAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: CognitoPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CognitoPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: AlexaIotPool
    Type: AWS::Cognito::IdentityPool
  CognitoRoleAttachment:
    Properties:
      IdentityPoolId:
        Ref: CognitoPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  CognitoUnAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: CognitoPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iot:Connect
            - iot:Subscribe
            - iot:Receive
            - iot:GetThingShadow
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: AWSIoTDataAccessSubscribe
    Type: AWS::IAM::Role
  DynamoTable:
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName:
        Fn::Sub: ask-${ProjectName}
    Type: AWS::Serverless::SimpleTable
  S3Bucket:
    Properties:
      AccessControl: PublicRead
    Type: AWS::S3::Bucket
  SkillLambdaFunction:
    Properties:
      CodeUri: s3://alexaconsole789/b363b3dfa6120a4cfc310b0e8abfbdac
      Description: Alexa Lambda function
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Fn::Sub: ask-${ProjectName}
          IdentityPoolId:
            Ref: CognitoPool
          bucketUrlPath:
            Fn::GetAtt:
            - S3Bucket
            - WebsiteURL
      Events:
        AlexaTrigger:
          Type: AlexaSkill
      FunctionName:
        Fn::Sub: ${ProjectName}-skill
      Handler: index.handler
      MemorySize: 128
      Policies:
      - Statement:
        - Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:dynamodb:*:*:table/ask-${ProjectName}
        Version: '2012-10-17'
      - Statement:
        - Action:
          - iot:Connect
          - iot:DescribeEndpoint
          Effect: Allow
          Resource:
          - '*'
        Version: '2012-10-17'
      - Statement:
        - Action:
          - iot:UpdateThingShadow
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/ask*
        Version: '2012-10-17'
      Runtime: nodejs8.10
      Timeout: 7
    Type: AWS::Serverless::Function
  userSessionAPIFunction:
    Properties:
      CodeUri: s3://alexaconsole789/5b3c5028088e41f87f9694d8bc0ebf68
      Description: DynamoDB Lambda function for API
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Fn::Sub: ask-${ProjectName}
      Events:
        usersessionAPI:
          Properties:
            Method: ANY
            Path: /{proxy+}
          Type: Api
      FunctionName:
        Fn::Sub: ${ProjectName}-usersessionAPI
      Handler: index.handler
      MemorySize: 128
      Policies:
      - Statement:
        - Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:dynamodb:*:*:table/ask-${ProjectName}
        Version: '2012-10-17'
      Runtime: nodejs8.10
      Timeout: 7
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
